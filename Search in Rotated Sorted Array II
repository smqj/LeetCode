class Solution {
public:
    bool search(int A[], int n, int target) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if(n==0) return false;
        int i=0, j=n-1, mid;
        if(A[0]==target) return true;
        while(i<n && A[i]==A[0]) ++i;
        if(i==n) return false;
        while(j>=0 && A[j]==A[0]) --j;
        int beg=findmax(A,n,i,j);
        if(target==A[i]) return true;
        else if(target>A[i]) return bs(A,n,i+1,beg,target);
        else if(target<A[i]) return bs(A,n,beg+1,j,target);

    }
    bool bs(int A[], int n, int left, int right, int target)
    {
        if(n==0 || left>=n || right<0) return false;
        int i=left, j=right, mid;
        while(i<=j){
            mid=(i+j)>>1;
            if(A[mid]==target) return true;
            if(A[mid]<target) i=mid+1;
            else j=mid-1;
        }
        return false;
      
    }
    int findmax(int A[], int n, int l, int r)
    {
        int i=l, j=r;
        int mid;
        while(i<=j){
            mid=(i+j)>>1;
            if(mid==r) return mid;
            if(A[mid+1]<A[mid]) return mid;
            if(A[mid]>=A[l]) i=mid+1;
            else if(A[mid]<A[l]) j=mid-1;
        }
    }
};
