/**
* Definition for binary tree
* struct TreeNode {
*     int val;
*     TreeNode *left;
*     TreeNode *right;
*     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
* };
*/
class Solution {
public:
    TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if(inorder.size()==0) return NULL;
        TreeNode *root = build(inorder, 0, inorder.size()-1, postorder, 0, postorder.size()-1);
        return root;
    }
  
    TreeNode *build(vector<int> &inorder, int inleft, int inright, vector<int>&postorder, int posleft, int posright)
    {
        TreeNode *root = new TreeNode(postorder[posright]);
        if(posright-posleft==0) return root;
        if(posright-posleft<0) return NULL;
        int pos=inright;
        while(postorder[posright]!=inorder[pos]) --pos;
        root->left=build(inorder, inleft, pos-1, postorder, posleft, posleft+(pos-inleft)-1);
        root->right=build(inorder, pos+1, inright, postorder, posleft+(pos-inleft), posright-1);
        return root;
    }
};
