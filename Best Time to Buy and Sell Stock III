//head表示从0到i的最大收益，tail表示从i到n-1的最大收益
//时间复杂度O(n)
class Solution {
public:
    int maxProfit(vector<int> &prices) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int n = prices.size();
        if(n < 2) return 0;
        int head[n], tail[n], maxprofit = 0;
        int minimum = prices[0], maximum = prices[n-1];
        head[0] = 0;
        tail[n-1] = 0;
        for(int i = 1; i < n; i++){
            minimum = min(minimum,prices[i]);
            head[i] = max(head[i-1],prices[i] - minimum);
        }
        for(int i = n - 2; i >= 0; i--){
            maximum = max(maximum,prices[i]);
            tail[i] = max(tail[i+1],maximum - prices[i]);
        }
        for(int i = 0; i < n; i++)
            maxprofit = max(tail[i] + head[i], maxprofit);
        return maxprofit;
    }
};

