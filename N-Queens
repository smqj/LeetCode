class Solution {
public:
    int n;
    vector<vector<string> > res;
    vector<vector<string> > solveNQueens(int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        res.clear();
        this->n = n;
        vector<string> board(n,string(n,'.'));
        solveNQueens(board,0);
        return res;
    }
   
    void solveNQueens(vector<string> &board, int row){
        if(n == row){
            res.push_back(board);
            return ;
        }
        for(int i = 0; i < n; i++){
            board[row][i] = 'Q';
            if(isSafe(board,row,i)) solveNQueens(board,row+1);
            board[row][i] = '.';
        }
    }
   
    bool isSafe(vector<string> &board, int row, int column){
        for(int i = row - 1; i >= 0; i--)
            if(board[i][column] == 'Q') return false;
        for(int i = 1; row - i >= 0 && column - i >= 0; i++)
            if(board[row-i][column-i] == 'Q') return false;
        for(int i = 1; row - i >= 0 && column + i < n; i++)
            if(board[row-i][column+i] == 'Q') return false;
        return true;
    }
};
